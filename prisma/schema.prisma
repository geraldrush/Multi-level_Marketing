generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  gmail         String         @unique
  googleId      String         @unique
  image         String
  password      String?
  role          UserRole       @default(USER)
  orders        Order[]
  payments      Payment[]
  location      String?
  agents        Agent[]
  notifications Notification[]
  chats         Chat[]
}

model Agent {
  id       String    @id @default(cuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  name     String
  location String
  products Product[]
  stock    Int
  sales    Int
  orders   Order[]
  chats    Chat[]
  reviews  String[]
  Review   Review[]
}

model Review {
  id      String @id @default(cuid())
  content String
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Int
  commission  Float
  orders      Order[]
  agentId     String?
  agent       Agent?  @relation(fields: [agentId], references: [id])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], map: "order_user")
  agentId   String
  agent     Agent       @relation(fields: [agentId], references: [id], map: "order_agent")
  productId String
  product   Product     @relation(fields: [productId], references: [id], map: "order_product")
  quantity  Int
  status    OrderStatus @default(PENDING)
}

model Notification {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  message String
  read    Boolean @default(false)
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], map: "chat_user")
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], map: "chat_agent")
  message   String
  timestamp DateTime @default(now())
}

model Payment {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  amount Int
  method String
  date   DateTime @default(now())
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}
